service: orders-pipeline

provider:
  name: aws
  runtime: python3.11
  region: ap-south-1
  tracing:
    lambda: true
  environment:
    ORDERS_TABLE: OrdersTable
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DescribeTable
          Resource:
            - Fn::GetAtt: [OrdersTable, Arn]
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - Ref: OrdersNotifyTopic

functions:
  orderProcessor:
    handler: src/order_processor.process_order
    memorySize: 512
    timeout: 30
    tracing: Active
    events:
      - sqs:
          arn:
            Fn::GetAtt: [OrdersQueue, Arn]
          batchSize: 5
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.ORDERS_TABLE}

  notifier:
    handler: src/notifier.send_notification
    memorySize: 256
    timeout: 10
    tracing: Active
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [OrdersTable, StreamArn]
          # Trigger only on INSERT events â€” no updates or deletes
          filterPatterns:
            - eventName: ["INSERT"]
    environment:
      SNS_TOPIC_ARN:
        Ref: OrdersNotifyTopic

resources:
  Resources:
    # Dead-letter queue for safety
    OrdersDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: orders-dead-letter-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true

    # standard queue for a order pipeline project
    OrdersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: orders-queue
        FifoQueue: true
        ContentBasedDeduplication: true
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [OrdersDeadLetterQueue, Arn]
          maxReceiveCount: 5

    OrdersNotifyTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: orders-notify-topic

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrdersTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE

plugins:
  - serverless-python-requirements

package:
  exclude:
    - tests/**

custom:
  pythonRequirements:
    dockerizePip: true